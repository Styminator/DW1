savehistory("~/Dropbox/Data Science/Data Wrangling/DW1 for RMarkdown.Rhistory")
setwd("~tomskawski/Dropbox/Data Science/Data Wrangling")
library("tidyr")
library("dplyr")
mydata <- read.csv("refine_original.csv")
# Group to check brand names
mydata %>% group_by(company) %>% summarise(city = n())
mydata
?setup
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
str(mydata)
# check class of columns. s/b character; if not, convert
mydata[] <- lapply(mydata, as.character)
# [] keeps data.frame, also changes all columns
class(mydata)
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
sapply(mydata, class)
# check class of columns. s/b character; if not, convert
mydata[] <- lapply(mydata, as.character)
# [] keeps data.frame, also changes all columns
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
tapply(mydata, class)
# check class of columns. s/b character; if not, convert
mydata[] <- lapply(mydata, as.character)
# [] keeps data.frame, also changes all columns
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
lapply(mydata, class)
# check class of columns. s/b character; if not, convert
mydata[] <- lapply(mydata, as.character)
# [] keeps data.frame, also changes all columns
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
mapply(mydata, class)
# check class of columns. s/b character; if not, convert
mydata[] <- lapply(mydata, as.character)
# [] keeps data.frame, also changes all columns
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
lapply(mydata, class)
# check class of columns. s/b character; if not, convert
mydata[] <- lapply(mydata, as.character)
# [] keeps data.frame, also changes all columns
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
lapply(mydata, class)
# check class of columns. s/b character; if not, convert
mydata[] <- lapply(mydata, as.character)
# [] keeps data.frame, also changes all columns
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
# To check class of columns. s/b character; if not, convert
lapply(mydata, class)
?lapply
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
# To check class of columns. s/b character; if not, convert
vapply(mydata, class)
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
# To check class of columns. s/b character; if not, convert
lapply(mydata, class)
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
# To check class of columns. s/b character; if not, convert
sapply(mydata, class)
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
# To check class of columns. s/b character; if not, convert
sapply(mydata, class, simplify = TRUE)
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
# To check class of columns. s/b character; if not, convert
sapply(mydata, class, USE.NAMES = TRUE)
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
# To check class of columns. s/b character; if not, convert
sapply(mydata, class, USE.NAMES = FALSE)
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
# To check class of columns. s/b character; if not, convert
sapply(mydata, class, simplify = FALSE)
mydata[] <- lapply(mydata, as.character)
# [] keeps data.frame, also changes all columns
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors (that took FOREVER to figure out)
# To check class of columns. s/b character; if not, convert
sapply(mydata, class)
mydata[] <- lapply(mydata, as.character)
# To check class of columns. s/b character; if not, convert
sapply(mydata, class)
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors, not characters (that took FOREVER to figure out)
mydata <- read.csv("refine_original.csv")
# read.csv pulls csv data in well, but as factors, not characters
# That took FOREVER to figure out)
# To check class of columns. s/b character; if not, convert
sapply(mydata, class)
# "[ ]" keeps data.frame, also changes all columns
mydata[] <- lapply(mydata, as.character)
# Re-check columns
sapply(mydata, class)
# Group to check brand names
mydata %>% group_by(company) %>% summarise(city = n())
# Group to check brand names; yields 19 separate spellings of four brands.
mydata %>% group_by(company) %>% summarise(city = n())
#value prints data, FALSE gives position
grep("^p", mydata$company, ignore.case = TRUE, value = TRUE)
# check for words that start with "p". All results are same brand (phillips, but later gets spelled with one l)
# value prints data, FALSE gives position
grep("^p", mydata$company, ignore.case = TRUE, value = TRUE)
# learning regex syntax was unbelievably cumbersome. Finally got there after research and a lot of trial and error
# \\b is a word boundary. Since it's at the beginning, this will be words that start with...
# \\b(p\f) = words that start with p or f (f added for the entry that says 'fillips')
# \\w+ = and all word characters (w) no matter how many (+)
mydata$company <- gsub("\\b(p|f)\\w+", "philips", mydata$company, ignore.case = TRUE)
# Re-check words starting with 'p'
grep("^p", mydata$company, ignore.case = TRUE, value = TRUE)
# Re-check grouping by name.
mydata %>% group_by(company) %>% summarise(city = n())
#\\b is word boundary, \\w is word character + gets other characters | is or
grep("\\ba\\w+", mydata$company, ignore.case = TRUE, value = TRUE)
grep("\\ba\\b", mydata$company, ignore.case = TRUE, value = TRUE)
grep("\\ba\\w+", mydata$company, ignore.case = TRUE, value = TRUE)
grep("\\ba\\w+\\s", mydata$company, ignore.case = TRUE, value = TRUE)
gsub("(\\ba\\w+|\\ba\\w+\\s)", "akzo", mydata$company, ignore.case = TRUE)
gsub("(\\ba\\w+|\\ba\\w+\\s)", "akzo", mydata$company, ignore.case = TRUE)
gsub("(\\ba\\w+|\\ba\\w+\\s\\w+)", "akzo", mydata$company, ignore.case = TRUE)
# After some trial and error, this regex syntax fixes all of the axzo variations
mydata$company <- gsub("(\\ba\\w+|\\ba\\w+\\s\\w+)", "akzo", mydata$company, ignore.case = TRUE)
# Re-check grouping by name. 12 results, with philips resolved
mydata %>% group_by(company) %>% summarise(city = n())
# Time for van houten. Tricky because it has a space.
#\\s\\w+ is for extra word
grep("\\bv\\w+\\s\\w+", mydata$company, ignore.case = TRUE, value = TRUE)
# Time for van houten. Tricky because it has a space.
#\\s\\w+ is for extra word
grep("\\bv\\w+\\s\\w+", mydata$company, ignore.case = TRUE, value = TRUE)
# Time for van houten. Tricky because it has a space.
#\\s\\w+ is for extra word
grep("\\bv\\w+\\s\\w+", mydata$company, ignore.case = TRUE, value = TRUE)
# Time for van houten. Tricky because it has a space.
#\\s\\w+ is for extra word
grep("\\bv\\w+\\s\\w+", mydata$company, ignore.case = TRUE, value = TRUE)
mydata$company <- gsub("\\bv\\w+\\s\\w+", "van houten", mydata$company, ignore.case = TRUE)
# Re-check grouping by name. 8 results, with philips and akzo resolved
mydata %>% group_by(company) %>% summarise(city = n())
grep("\\bu\\w+", mydata$company, ignore.case = TRUE, value = TRUE)
mydata$company <- gsub("\\bu\\w+", "unilever", mydata$company, ignore.case = TRUE)
# Final check. 4 results, only unilever remains
mydata %>% group_by(company) %>% summarise(city = n())
# Re-check grouping by name. 8 results, with philips and akzo resolved
mydata %>% group_by(company) %>% summarise(city = n())
opts_chunk
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
opts_chunk
opts_chunk$set
